(** Generic Test Runner engine for any type *) 

(** This module implements the execution of a test request 
    for a given type. 

    The type for which the test is run is specified as a 
    module signature to be implemented by 
    the testing application. 
  *)

(** Signature required for the type to be tested 
 *)
module type T_sig = sig 

  type t 
  (** type generated by ocaml-protoc *)
  
  val make : int -> (t * int)  
  (** [make difficulty] creates a value of type [t] with 
      corresponding difficulty. 
    *)

  val difficulty_size : t -> int 
  (** [difficulty_size v] returns the difficulty_size of [v] *)

  val encode : t -> Pbrt.Encoder.t -> unit 
  (** [encode v encoder] encode function generated by ocaml-protoc *)

  val decode : Pbrt.Decoder.t -> t 
  (** [encode decoder] decode function generated by ocaml-protoc *)

end (* T_sig *) 

module type Runner_sig = sig 
  val run : Benchmark_types.test_request -> Benchmark_types.test_response
  (** [run request] execute the corresponding request and returns 
      the test response 
    *)
end 

module Make (T:T_sig) : Runner_sig
(** [Make(T)] returns a module which can execute a test request for type [T.t] 
 *)
