====================== <PROTO> ======================

      // Syntax error reporting check #1
      syntax = "proto3"!#$%
    
===================== </PROTO> ======================
======================= <AST> =======================
[!] EXN: test.proto:3:24: Failure("Unknown character found !") at `syntax = "proto3" <<< HERE'.
====================== </AST> =======================


====================== <PROTO> ======================

      // Syntax error reporting check #2
      syntax = "proto3" , message int32 { }
    
===================== </PROTO> ======================
======================= <AST> =======================
[!] EXN: test.proto:3:25: Parsing error at `syntax = "proto3" , <<< HERE'.
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";

      message SimpleMessage {
        int32 id = 1;
        string name = 2;
        bool active = 3;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 1;
                  message_name = "SimpleMessage";
                  message_body = [{
                                     field_name = "id";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Int32;
                                     field_options = [];
                                     };
                                  {
                                     field_name = "name";
                                     field_number = 2;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     };
                                  {
                                     field_name = "active";
                                     field_number = 3;
                                     field_label = `Nolabel;
                                     field_type = Bool;
                                     field_options = [];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";

      message NestedMessage {
        int32 id = 1;
        string description = 2;
      }

      message ComplexMessage {
        string title = 1;
        repeated NestedMessage items = 2;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 2;
                  message_name = "NestedMessage";
                  message_body = [{
                                     field_name = "id";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Int32;
                                     field_options = [];
                                     };
                                  {
                                     field_name = "description";
                                     field_number = 2;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 3;
                  message_name = "ComplexMessage";
                  message_body = [{
                                     field_name = "title";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     };
                                  {
                                     field_name = "items";
                                     field_number = 2;
                                     field_label = `Repeated;
                                     field_type = {
                                                     type_path: (empty);
                                                     type_name: "NestedMessage";
                                                     from_root: false
                                                     };
                                     field_options = [];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";

      enum Status {
        UNKNOWN = 0;
        ACTIVE = 1;
        INACTIVE = 2;
      }

      message SubMessage {
        string content = 1;
      }

      message DataMessage {
        oneof data {
          string text = 1;
          int32 number = 2;
          SubMessage sub = 3;
        }
        Status status = 4;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 5;
                  message_name = "SubMessage";
                  message_body = [{
                                     field_name = "content";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 6;
                  message_name = "DataMessage";
                  message_body = [{oneof_name = "data";
                                     oneof_body = [{
                                                      field_name = "text";
                                                      field_number = 1;
                                                      field_label = ;
                                                      field_type = String;
                                                      field_options = [
                                                      ];
                                                      };
                                                   {
                                                      field_name = "number";
                                                      field_number = 2;
                                                      field_label = ;
                                                      field_type = Int32;
                                                      field_options = [
                                                      ];
                                                      };
                                                   {
                                                      field_name = "sub";
                                                      field_number = 3;
                                                      field_label = ;
                                                      field_type = {
                                                                    type_path: (empty);
                                                                    type_name: "SubMessage";
                                                                    from_root: false
                                                                    };
                                                      field_options = [
                                                      ];
                                                      }];
                                     };
                                  {
                                     field_name = "status";
                                     field_number = 4;
                                     field_label = `Nolabel;
                                     field_type = {
                                                     type_path: (empty);
                                                     type_name: "Status";
                                                     from_root: false
                                                     };
                                     field_options = [];
                                     }];
                  }];
   services = [];
   enums = [{
               enum_id = 4;
               enum_name = "Status";
               enum_body = [{
                               enum_value_name = "UNKNOWN";
                               enum_value_int = 0;
                               };
                            {
                               enum_value_name = "ACTIVE";
                               enum_value_int = 1;
                               };
                            {
                               enum_value_name = "INACTIVE";
                               enum_value_int = 2;
                               }];
               }];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";
  
      message OptionMessage {
        option (my_option) = true;
  
        int32 id = 1 [(my_field_option) = "value"];
        string name = 2;
  
        map<string, int32> scores = 3;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 7;
                  message_name = "OptionMessage";
                  message_body = [{
                                    "my_option": true
                                    };
                                  {
                                     field_name = "id";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Int32;
                                     field_options = [{
                                                        "my_field_option": "value"
                                                        }];
                                     };
                                  {
                                     field_name = "name";
                                     field_number = 2;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     };
                                  {
                                     map_name = "scores";
                                     map_number = 3;
                                     map_key_type = String;
                                     map_value_type = Int32;
                                     map_options = [];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";
      
      service MyService {
        rpc UnaryRPC (UnaryRequest) returns (UnaryResponse);
        rpc ServerStreamingRPC (ServerStreamingRequest) returns (stream ServerStreamingResponse);
        rpc ClientStreamingRPC (stream ClientStreamingRequest) returns (ClientStreamingResponse);
        rpc BidirectionalStreamingRPC (stream BidirectionalRequest) returns (stream BidirectionalResponse);
      }
      
      message UnaryRequest {
        string input = 1;
      }
      
      message UnaryResponse {
        string output = 1;
      }
      
      message ServerStreamingRequest {
        string query = 1;
      }
      
      message ServerStreamingResponse {
        repeated string results = 1;
      }
      
      message ClientStreamingRequest {
        repeated int32 values = 1;
      }
      
      message ClientStreamingResponse {
        int32 sum = 1;
      }
      
      message BidirectionalRequest {
        string message = 1;
      }
      
      message BidirectionalResponse {
        string reply = 1;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 8;
                  message_name = "UnaryRequest";
                  message_body = [{
                                     field_name = "input";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 9;
                  message_name = "UnaryResponse";
                  message_body = [{
                                     field_name = "output";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 10;
                  message_name = "ServerStreamingRequest";
                  message_body = [{
                                     field_name = "query";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 11;
                  message_name = "ServerStreamingResponse";
                  message_body = [{
                                     field_name = "results";
                                     field_number = 1;
                                     field_label = `Repeated;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 12;
                  message_name = "ClientStreamingRequest";
                  message_body = [{
                                     field_name = "values";
                                     field_number = 1;
                                     field_label = `Repeated;
                                     field_type = Int32;
                                     field_options = [{
                                                        "packed": true
                                                        }];
                                     }];
                  };
               {
                  id = 13;
                  message_name = "ClientStreamingResponse";
                  message_body = [{
                                     field_name = "sum";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Int32;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 14;
                  message_name = "BidirectionalRequest";
                  message_body = [{
                                     field_name = "message";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  };
               {
                  id = 15;
                  message_name = "BidirectionalResponse";
                  message_body = [{
                                     field_name = "reply";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [];
                                     }];
                  }];
   services = [{
                  service_name = "MyService";
                  service_body = [{
                                     rpc_name = "UnaryRPC";
                                     rpc_options = [];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "UnaryRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "UnaryResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "ServerStreamingRPC";
                                     rpc_options = [];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ServerStreamingRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = true;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ServerStreamingResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "ClientStreamingRPC";
                                     rpc_options = [];
                                     rpc_req_stream = true;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ClientStreamingRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ClientStreamingResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "BidirectionalStreamingRPC";
                                     rpc_options = [];
                                     rpc_req_stream = true;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "BidirectionalRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = true;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "BidirectionalResponse";
                                                  from_root: false
                                                  };
                                     }];
                  }];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto2";
      message Foo {
        optional int32 x = 1 [default=1];
        optional int32 y = 1 [default=1] ; ; ;; 
        optional .M1 z = 1;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto2;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 16;
                  message_name = "Foo";
                  message_body = [{
                                     field_name = "x";
                                     field_number = 1;
                                     field_label = `Optional;
                                     field_type = Int32;
                                     field_options = [{
                                                        "default": 1
                                                        }];
                                     };
                                  {
                                     field_name = "y";
                                     field_number = 1;
                                     field_label = `Optional;
                                     field_type = Int32;
                                     field_options = [{
                                                        "default": 1
                                                        }];
                                     };
                                  {
                                     field_name = "z";
                                     field_number = 1;
                                     field_label = `Optional;
                                     field_type = {
                                                     type_path: (empty);
                                                     type_name: "M1";
                                                     from_root: true
                                                     };
                                     field_options = [];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";
      message Bar {
        oneof foo {string name = 4;SubMessage sub_message = 9 [a=1];}
        /* below test is to check resilience with respect to semi colon */
        oneof foo {string name = 4; ; SubMessage sub_message = 9 [a=1]; ; ;;}; ;;
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 17;
                  message_name = "Bar";
                  message_body = [{oneof_name = "foo";
                                     oneof_body = [{
                                                      field_name = "name";
                                                      field_number = 4;
                                                      field_label = ;
                                                      field_type = String;
                                                      field_options = [
                                                      ];
                                                      };
                                                   {
                                                      field_name = "sub_message";
                                                      field_number = 9;
                                                      field_label = ;
                                                      field_type = {
                                                                    type_path: (empty);
                                                                    type_name: "SubMessage";
                                                                    from_root: false
                                                                    };
                                                      field_options = [
                                                      {
                                                        "a": 1
                                                        }];
                                                      }];
                                     };
                                  {oneof_name = "foo";
                                     oneof_body = [{
                                                      field_name = "name";
                                                      field_number = 4;
                                                      field_label = ;
                                                      field_type = String;
                                                      field_options = [
                                                      ];
                                                      };
                                                   {
                                                      field_name = "sub_message";
                                                      field_number = 9;
                                                      field_label = ;
                                                      field_type = {
                                                                    type_path: (empty);
                                                                    type_name: "SubMessage";
                                                                    from_root: false
                                                                    };
                                                      field_options = [
                                                      {
                                                        "a": 1
                                                        }];
                                                      }];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      syntax = "proto3";
      
      package examplepb;
      
      import "validate/validate.proto";
      
      message Person {
        uint64 id = 1 [(validate.rules).uint64.gt = 999];
      
        string email = 2 [(validate.rules).string.email = true];
      
        string name = 3 [(validate.rules).string = {
          pattern:   "^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$",
          max_bytes: 256,
        }];
      
        Location home = 4 [(validate.rules).message.required = true];
      
        message Location {
          double lat = 1 [(validate.rules).double = {gte: -90,  lte: 90}];
          double lng = 2 [(validate.rules).double = {gte: -180, lte: 180}];
        }
      }

      message Other {
        oneof id {
          // either x, y, or z must be set.
          option (validate.required) = true;

          string x = 1 [(validate.rules).string.len = 5];
          int32  y = 2;
          Person z = 3;
        }

        // x1 must be either 1, 2, or 3
        uint32 x1 = 1 [(validate.rules).uint32 = {in: [1,2,3]}];

        // x2 cannot be 0 nor 0.99
        float x2 = 1 [(validate.rules).float = {not_in: [0, 0.99]}];
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = proto3;
   imports = [{file_name = "validate/validate.proto";public = false;}];
   file_options = [];
   package = examplepb;
   messages = [{
                  id = 19;
                  message_name = "Person";
                  message_body = [{
                                     field_name = "id";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Uint64;
                                     field_options = [{
                                                        "validate.rules.uint64.gt": 999
                                                        }];
                                     };
                                  {
                                     field_name = "email";
                                     field_number = 2;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [{
                                                        "validate.rules.string.email": true
                                                        }];
                                     };
                                  {
                                     field_name = "name";
                                     field_number = 3;
                                     field_label = `Nolabel;
                                     field_type = String;
                                     field_options = [{
                                                        "validate.rules.string": {
                                                      "pattern": "^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$",
                                                      "max_bytes": 256}
                                                        }];
                                     };
                                  {
                                     field_name = "home";
                                     field_number = 4;
                                     field_label = `Nolabel;
                                     field_type = {
                                                     type_path: (empty);
                                                     type_name: "Location";
                                                     from_root: false
                                                     };
                                     field_options = [{
                                                        "validate.rules.message.required": true
                                                        }];
                                     };
                                  {
                                     id = 18;
                                     message_name = "Location";
                                     message_body = [{
                                                        field_name = "lat";
                                                        field_number = 1;
                                                        field_label = `Nolabel;
                                                        field_type = Double;
                                                        field_options = [
                                                        {
                                                          "validate.rules.double": {
                                                        "gte": -90,
                                                        "lte": 90}
                                                          }];
                                                        };
                                                     {
                                                        field_name = "lng";
                                                        field_number = 2;
                                                        field_label = `Nolabel;
                                                        field_type = Double;
                                                        field_options = [
                                                        {
                                                          "validate.rules.double": {
                                                        "gte": -180,
                                                        "lte": 180}
                                                          }];
                                                        }];
                                     }];
                  };
               {
                  id = 20;
                  message_name = "Other";
                  message_body = [{oneof_name = "id";
                                     oneof_body = [{
                                                     "validate.required": true
                                                     };
                                                   {
                                                      field_name = "x";
                                                      field_number = 1;
                                                      field_label = ;
                                                      field_type = String;
                                                      field_options = [
                                                      {
                                                        "validate.rules.string.len": 5
                                                        }];
                                                      };
                                                   {
                                                      field_name = "y";
                                                      field_number = 2;
                                                      field_label = ;
                                                      field_type = Int32;
                                                      field_options = [
                                                      ];
                                                      };
                                                   {
                                                      field_name = "z";
                                                      field_number = 3;
                                                      field_label = ;
                                                      field_type = {
                                                                    type_path: (empty);
                                                                    type_name: "Person";
                                                                    from_root: false
                                                                    };
                                                      field_options = [
                                                      ];
                                                      }];
                                     };
                                  {
                                     field_name = "x1";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Uint32;
                                     field_options = [{
                                                        "validate.rules.uint32": {
                                                      "in": [1,
                                                             2,
                                                             3]}
                                                        }];
                                     };
                                  {
                                     field_name = "x2";
                                     field_number = 1;
                                     field_label = `Nolabel;
                                     field_type = Float;
                                     field_options = [{
                                                        "validate.rules.float": {
                                                      "not_in": [0,
                                                                 0.990000]}
                                                        }];
                                     }];
                  }];
   services = [];
   enums = [];
   extends = [];
   }
{
   proto_file_name = validate/validate.proto;
   syntax = (None);
   imports = [];
   file_options = [];
   package = (None);
   messages = [];
   services = [];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


====================== <PROTO> ======================

      message Shelf {}
      message GetShelfRequest {}
      message GetShelfResponse {}
      message ListShelvesRequest {}
      message ListShelvesResponse {}

      service ShelfService {}
      service ShelfServiceV2 {
        option (some.config) = "service_shelf";

        rpc ListShelves (ListShelvesRequest) returns (ListShelvesResponse);

        rpc ListShelvesStreamerClient (stream ListShelvesRequest) returns (ListShelvesResponse);
        rpc ListShelvesStreamerServer (ListShelvesRequest) returns (stream ListShelvesResponse);
        rpc ListShelvesStreamerBidi (stream ListShelvesRequest) returns (stream ListShelvesResponse);

        rpc GetShelf (GetShelfRequest) returns (GetShelfResponse) {
          option (const.config) = "rpc_shelf";
          option (google.api.http) = {
            post: "/v1/shelves/{shelf}",
            body: "body"
          };
        }

        rpc GetShelfWithSemicolon (GetShelfRequest) returns (GetShelfResponse) {};
      }
    
===================== </PROTO> ======================
======================= <AST> =======================
{
   proto_file_name = test.proto;
   syntax = (None);
   imports = [];
   file_options = [];
   package = (None);
   messages = [{
                  id = 21;
                  message_name = "Shelf";
                  message_body = [];
                  };
               {
                  id = 22;
                  message_name = "GetShelfRequest";
                  message_body = [];
                  };
               {
                  id = 23;
                  message_name = "GetShelfResponse";
                  message_body = [];
                  };
               {
                  id = 24;
                  message_name = "ListShelvesRequest";
                  message_body = [];
                  };
               {
                  id = 25;
                  message_name = "ListShelvesResponse";
                  message_body = [];
                  }];
   services = [{
                  service_name = "ShelfService";
                  service_body = [];
                  };
               {
                  service_name = "ShelfServiceV2";
                  service_body = [{
                                    "some.config": "service_shelf"
                                    };
                                  {
                                     rpc_name = "ListShelves";
                                     rpc_options = [];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "ListShelvesStreamerClient";
                                     rpc_options = [];
                                     rpc_req_stream = true;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "ListShelvesStreamerServer";
                                     rpc_options = [];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = true;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "ListShelvesStreamerBidi";
                                     rpc_options = [];
                                     rpc_req_stream = true;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = true;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "ListShelvesResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "GetShelf";
                                     rpc_options = [{
                                                      "const.config": "rpc_shelf"
                                                      },
                                                    {
                                                      "google.api.http": {
                                                    "post": "/v1/shelves/{shelf}",
                                                    "body": "body"}
                                                      }];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "GetShelfRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "GetShelfResponse";
                                                  from_root: false
                                                  };
                                     };
                                  {
                                     rpc_name = "GetShelfWithSemicolon";
                                     rpc_options = [];
                                     rpc_req_stream = false;
                                     rpc_req = {
                                                  type_path: (empty);
                                                  type_name: "GetShelfRequest";
                                                  from_root: false
                                                  };
                                     rpc_res_stream = false;
                                     rpc_res = {
                                                  type_path: (empty);
                                                  type_name: "GetShelfResponse";
                                                  from_root: false
                                                  };
                                     }];
                  }];
   enums = [];
   extends = [];
   }
====================== </AST> =======================


